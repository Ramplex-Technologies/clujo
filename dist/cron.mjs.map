{"version":3,"sources":["../src/cron.ts"],"sourcesContent":["import Croner, { type CronOptions } from \"croner\";\nimport type { ICron } from \"./cron.types\";\n\nexport class Cron implements ICron {\n  private job: Croner | null = null;\n\n  constructor(\n    private readonly cronExpression: string,\n    private readonly cronOptions?: CronOptions,\n  ) {}\n\n  start(handler: () => Promise<void> | void): void {\n    if (this.job) throw new Error(\"Attempting to start an already started job\");\n    this.job = new Croner(this.cronExpression, this.cronOptions, handler);\n  }\n\n  stop(timeout: number): Promise<void> {\n    return new Promise<void>((resolve) => {\n      const startTime = Date.now();\n      const checkAndStop = () => {\n        if (!this.job) {\n          resolve(); // resolve if job has cleared\n          return;\n        }\n\n        if (this.job.isBusy()) {\n          if (Date.now() - startTime > timeout) {\n            this.job.stop();\n            this.job = null;\n            resolve();\n            return;\n          }\n          setTimeout(checkAndStop, 100);\n        } else {\n          this.job.stop();\n          this.job = null;\n          resolve();\n        }\n      };\n\n      checkAndStop();\n    });\n  }\n}\n"],"mappings":";AAAA,OAAO,YAAkC;AAGlC,IAAM,OAAN,MAA4B;AAAA,EAGjC,YACmB,gBACA,aACjB;AAFiB;AACA;AAJnB,SAAQ,MAAqB;AAAA,EAK1B;AAAA,EAEH,MAAM,SAA2C;AAC/C,QAAI,KAAK,IAAK,OAAM,IAAI,MAAM,4CAA4C;AAC1E,SAAK,MAAM,IAAI,OAAO,KAAK,gBAAgB,KAAK,aAAa,OAAO;AAAA,EACtE;AAAA,EAEA,KAAK,SAAgC;AACnC,WAAO,IAAI,QAAc,CAAC,YAAY;AACpC,YAAM,YAAY,KAAK,IAAI;AAC3B,YAAM,eAAe,MAAM;AACzB,YAAI,CAAC,KAAK,KAAK;AACb,kBAAQ;AACR;AAAA,QACF;AAEA,YAAI,KAAK,IAAI,OAAO,GAAG;AACrB,cAAI,KAAK,IAAI,IAAI,YAAY,SAAS;AACpC,iBAAK,IAAI,KAAK;AACd,iBAAK,MAAM;AACX,oBAAQ;AACR;AAAA,UACF;AACA,qBAAW,cAAc,GAAG;AAAA,QAC9B,OAAO;AACL,eAAK,IAAI,KAAK;AACd,eAAK,MAAM;AACX,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,mBAAa;AAAA,IACf,CAAC;AAAA,EACH;AACF;","names":[]}