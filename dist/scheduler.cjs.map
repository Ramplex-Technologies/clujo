{"version":3,"sources":["../src/scheduler.ts"],"sourcesContent":["import type Redis from \"ioredis\";\nimport type { Clujo } from \"./clujo\";\n\n/**\n * Scheduler class for managing and running Clujo jobs.\n * This class allows adding, starting, and stopping multiple Clujo jobs in a centralized manner.\n */\nexport class Scheduler {\n  // biome-ignore lint/suspicious/noExplicitAny: handle any combination of clujo's\n  private readonly jobs: { job: Clujo<any, any>; completionHandler?: (ctx: any) => Promise<void> | void }[] = [];\n\n  /**\n   * Adds a Clujo job to the scheduler.\n   * @param input - Object containing the job and optional completion handler.\n   * @param input.job - The Clujo job to be added.\n   * @param input.completionHandler - Optional function to invoke after the job completes.\n   */\n  public addJob<\n    TDependencies extends Record<string, unknown>,\n    TContext extends Record<string, unknown> & { initial: unknown },\n  >(input: {\n    job: Clujo<TDependencies, TContext>;\n    completionHandler?: (ctx: Required<TContext>) => Promise<void> | void;\n  }) {\n    this.jobs.push(input);\n  }\n\n  /**\n   * Starts all added jobs in the scheduler.\n   * @param redis - Optional Redis instance to be passed to the jobs. If provided, enables distributed locking.\n   */\n  public start(redis?: Redis) {\n    for (const { job, completionHandler } of this.jobs) {\n      const options: Record<string, unknown> = {};\n      if (redis) {\n        options.redis = { client: redis };\n      }\n      if (completionHandler) {\n        options.onTaskCompletion = completionHandler;\n      }\n      job.start(options);\n    }\n  }\n  /**\n   * Stops all running jobs in the scheduler.\n   * @param timeout - The maximum time (in milliseconds) to wait for jobs to stop.\n   * @returns A promise that resolves when all jobs have stopped or the timeout is reached.\n   */\n  public async stop(timeout: number) {\n    await Promise.all(this.jobs.map(({ job }) => job.stop(timeout)));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,IAAM,YAAN,MAAgB;AAAA;AAAA,EAEJ,OAA2F,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQtG,OAGL,OAGC;AACD,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,MAAM,OAAe;AAC1B,eAAW,EAAE,KAAK,kBAAkB,KAAK,KAAK,MAAM;AAClD,YAAM,UAAmC,CAAC;AAC1C,UAAI,OAAO;AACT,gBAAQ,QAAQ,EAAE,QAAQ,MAAM;AAAA,MAClC;AACA,UAAI,mBAAmB;AACrB,gBAAQ,mBAAmB;AAAA,MAC7B;AACA,UAAI,MAAM,OAAO;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAa,KAAK,SAAiB;AACjC,UAAM,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC,EAAE,IAAI,MAAM,IAAI,KAAK,OAAO,CAAC,CAAC;AAAA,EACjE;AACF;","names":[]}