{"version":3,"sources":["../src/scheduler.ts"],"sourcesContent":["import type Redis from \"ioredis\";\nimport type { IClujo } from \"./clujo.types\";\nimport type { TaskMap } from \"./task-graph.types\";\n\nexport class Scheduler {\n  // biome-ignore lint/suspicious/noExplicitAny: handle any combination of clujo's\n  private readonly jobs: { job: IClujo<any, any, any>; completionHandler: (ctx: any) => Promise<void> | void }[] = [];\n\n  addJob<TDependencies, TContext>(input: {\n    // biome-ignore lint/suspicious/noExplicitAny: I do not want to type this\n    job: IClujo<TDependencies, TContext, any>;\n    completionHandler: (ctx: Required<TContext>) => Promise<void> | void;\n  }) {\n    this.jobs.push(input);\n  }\n\n  start(redis?: Redis) {\n    for (const { job } of this.jobs) {\n      job.start({ redis });\n    }\n  }\n\n  async stop() {\n    await Promise.all(this.jobs.map(({ job }) => job.stop()));\n  }\n}\n"],"mappings":";AAIO,IAAM,YAAN,MAAgB;AAAA,EAAhB;AAEL;AAAA,SAAiB,OAAgG,CAAC;AAAA;AAAA,EAElH,OAAgC,OAI7B;AACD,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB;AAAA,EAEA,MAAM,OAAe;AACnB,eAAW,EAAE,IAAI,KAAK,KAAK,MAAM;AAC/B,UAAI,MAAM,EAAE,MAAM,CAAC;AAAA,IACrB;AAAA,EACF;AAAA,EAEA,MAAM,OAAO;AACX,UAAM,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC,EAAE,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC;AAAA,EAC1D;AACF;","names":[]}