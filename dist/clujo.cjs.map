{"version":3,"sources":["../src/clujo.ts","../src/cron.ts"],"sourcesContent":["import type { CronOptions } from \"croner\";\nimport type { TaskGraphRunner } from \"./task-graph\";\nimport { Cron } from \"./cron\";\nimport type Redis from \"ioredis\";\nimport { type LockOptions, Mutex } from \"redis-semaphore\";\n\nexport class Clujo<\n  TTaskDependencies extends Record<string, unknown>,\n  TTaskContext extends Record<string, unknown> & {\n    initial: unknown;\n  },\n> {\n  public readonly id: string;\n\n  private readonly _cron: Cron;\n  private readonly _taskGraphRunner: TaskGraphRunner<TTaskDependencies, TTaskContext>;\n\n  private _hasStarted = false;\n  private _runImmediately = false;\n\n  constructor({\n    id,\n    taskGraphRunner,\n    cron,\n  }: {\n    id: string;\n    taskGraphRunner: TaskGraphRunner<TTaskDependencies, TTaskContext>;\n    cron: { pattern: string; options?: CronOptions };\n  }) {\n    if (!id) throw new Error(\"Clujo ID is required.\");\n    if (!taskGraphRunner) throw new Error(\"taskGraphRunner is required\");\n    if (!cron.pattern) throw new Error(\"cron.pattern is required\");\n    this.id = id;\n    this._taskGraphRunner = taskGraphRunner;\n    // TODO: validate pattern\n    this._cron = new Cron(cron.pattern, cron.options);\n  }\n\n  public runOnStartup() {\n    this._runImmediately = true;\n    return this;\n  }\n\n  public start({\n    redis,\n    onTaskCompletion,\n  }: {\n    redis?: { client: Redis; lockOptions?: LockOptions };\n    onTaskCompletion?: (ctx: Required<TTaskContext>) => void | Promise<void>;\n  } = {}) {\n    if (this._hasStarted) throw new Error(\"Cannot start a Clujo that has already started.\");\n    const executeTasksAndCompletionHandler = async () => {\n      const finalContext = await this._taskGraphRunner.run();\n      if (onTaskCompletion) await onTaskCompletion(finalContext);\n    };\n\n    const handler = async () => {\n      try {\n        if (!redis) {\n          await executeTasksAndCompletionHandler();\n        } else {\n          await using lock = await this._tryAcquire(redis.client, redis.lockOptions);\n          if (lock) {\n            await executeTasksAndCompletionHandler();\n          }\n        }\n      } catch (error) {\n        console.error(`Clujo ${this.id} failed: ${error}`);\n      }\n    };\n    this._cron.start(handler);\n    this._hasStarted = true;\n    if (this._runImmediately) this.trigger();\n    return this;\n  }\n\n  public async stop(timeout = 5000): Promise<void> {\n    if (!this._hasStarted) throw new Error(\"Cannot stop a Clujo that has not started.\");\n    await this._cron.stop(timeout);\n  }\n\n  public async trigger(): Promise<Required<TTaskContext>> {\n    return await this._taskGraphRunner.run();\n  }\n\n  private async _tryAcquire(redis: Redis, lockOptions: LockOptions | undefined): Promise<ILock | null> {\n    const mutex = new Mutex(redis, this.id, lockOptions);\n    const lock = await mutex.tryAcquire();\n    if (!lock) return null;\n    return {\n      mutex,\n      [Symbol.asyncDispose]: async () => {\n        try {\n          await mutex.release();\n        } catch (error) {\n          console.error(`Error releasing lock for Clujo ${this.id}: ${error}`);\n        }\n      },\n    };\n  }\n}\n\ninterface ILock extends AsyncDisposable {\n  mutex: Mutex;\n}\n","import Croner, { type CronOptions } from \"croner\";\n\nexport class Cron {\n  private job: Croner | null = null;\n\n  constructor(\n    private readonly cronExpression: string,\n    private readonly cronOptions?: CronOptions,\n  ) {}\n\n  start(handler: () => Promise<void> | void): void {\n    if (this.job) throw new Error(\"Attempting to start an already started job\");\n    this.job = new Croner(this.cronExpression, this.cronOptions, handler);\n  }\n\n  stop(timeout: number): Promise<void> {\n    return new Promise<void>((resolve) => {\n      const startTime = Date.now();\n      const checkAndStop = () => {\n        if (!this.job) {\n          resolve(); // resolve if job has cleared\n          return;\n        }\n\n        if (this.job.isBusy()) {\n          if (Date.now() - startTime > timeout) {\n            this.job.stop();\n            this.job = null;\n            resolve();\n            return;\n          }\n          setTimeout(checkAndStop, 100);\n        } else {\n          this.job.stop();\n          this.job = null;\n          resolve();\n          return;\n        }\n      };\n\n      checkAndStop();\n    });\n  }\n}\n"],"mappings":"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","names":["Croner"]}