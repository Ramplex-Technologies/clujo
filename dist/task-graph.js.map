{"version":3,"sources":["../src/task-graph.ts","../src/_context.ts","../src/_task.ts"],"sourcesContent":["/* --------------------------------------------------------------------------\n\n  MIT License\n\n  Copyright (c) 2024 Rami Pellumbi\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n-----------------------------------------------------------------------------*/\n\nimport { Context } from \"./_context\";\nimport { Task, type TaskOptions } from \"./_task\";\n\n/**\n * Represents a task graph that can be built and executed.\n *\n * @template TTaskDependencies - Type of the dependencies each task will receive\n * @template TTaskContext - Type of the context each task will receive\n */\nexport class TaskGraph<\n  TTaskDependencies extends Record<string, unknown> = Record<string, never>,\n  TTaskContext extends Record<string, unknown> & { initial: unknown } = { initial: unknown },\n> {\n  // start with an undefined context value (placed under key initial)\n  private _contextValueOrFactory: unknown = undefined;\n  // start with an empty dependencies object\n  private _dependencies: unknown = Object.create(null);\n\n  /**\n   * Finalizes the setup and returns an instance of `TaskGraphBuilder`.\n   * Once invoked, the initial context and dependencies are no longer mutable.\n   *\n   * @returns A new instance of `TaskGraphBuilder` with the current state.\n   */\n  public finalize() {\n    // return a new instance of TaskGraph with the current state\n    return new TaskGraphBuilder<TTaskDependencies, TTaskContext>(\n      this._dependencies as TTaskDependencies,\n      this._contextValueOrFactory as undefined | TTaskContext | (() => TTaskContext | Promise<TTaskContext>),\n    );\n  }\n\n  /**\n   * Sets the initial context for the task graph.\n   * This context will be passed to the first task(s) in the graph under the `initial` key.\n   * Multiple invocation of this method will override the previous context.\n   *\n   * @template TNewContext The type of the new context.\n   * @param valueOrFactory - The initial context value or a factory function to create it.\n   *                         If a function is provided, it can be synchronous or asynchronous.\n   * @returns A TaskGraph instance with the new context type.\n   */\n  public setContext<TNewContext>(valueOrFactory: TNewContext | (() => TNewContext | Promise<TNewContext>)) {\n    // set the context value to the provided value or factory\n    this._contextValueOrFactory = valueOrFactory;\n    // return the builder with the new context type\n    return this as unknown as TaskGraph<TTaskDependencies, { initial: TNewContext }>;\n  }\n\n  /**\n   * Sets the dependencies for the task graph. These dependencies will be available to all tasks in the graph.\n   * Multiple invocation of this method will override the previous dependencies.\n   *\n   * @template TNewDependencies The type of the new dependencies, which must be an object.\n   * @param value - The dependencies object to be used across all tasks in the graph.\n   * @returns A TaskGraph instance with the new dependencies type.\n   */\n  public setDependencies<TNewDependencies extends Record<string, unknown>>(value: TNewDependencies) {\n    if (typeof value !== \"object\" || value === null) throw new Error(\"Initial dependencies must be an object\");\n    // set the dependencies object to the provided value\n    this._dependencies = value as unknown as TTaskDependencies;\n    // return the builder with the new dependencies type\n    return this as unknown as TaskGraph<TNewDependencies, TTaskContext>;\n  }\n}\n\n/**\n * Represents a task graph builder that can be used to add tasks to the graph.\n * When built, the graph will be sorted topologically and returned as a `TaskGraphRunner` instance.\n *\n * @template TTaskDependencies - Type of the dependencies each task will receive\n * @template TTaskContext - Type of the context each task will receive\n * @template TAllDependencyIds - The task IDs that can be used as dependencies for new tasks\n */\nexport class TaskGraphBuilder<\n  TTaskDependencies extends Record<string, unknown>,\n  TTaskContext extends Record<string, unknown> & { initial: unknown },\n  TAllDependencyIds extends string = string & keyof Omit<TTaskContext, \"initial\">,\n> {\n  private readonly _tasks = new Map<string, Task<TTaskDependencies, TTaskContext, unknown>>();\n  private readonly _topologicalOrder: string[] = [];\n\n  constructor(\n    private _dependencies: TTaskDependencies,\n    private _contextValueOrFactory: undefined | TTaskContext | (() => TTaskContext | Promise<TTaskContext>),\n  ) {}\n\n  /**\n   * Adds a new task to the graph.\n   *\n   * @template TTaskId The ID of the task, which must be unique.\n   * @template TTaskDependencyIds The IDs of the task's dependencies.\n   * @template TTaskReturn The return type of the task.\n   * @param options The configuration options for the task:\n   * @param options.id A unique identifier for the task.\n   * @param options.execute A function that performs the task's operation. It receives an object with `deps` (dependencies) and `ctx` (context) properties.\n   * @param options.dependencies An optional array of task IDs that this task depends on. If not provided, the task will be executed immediately on start.\n   * @param options.retryPolicy An optional retry policy for the task, specifying maxRetries and retryDelayMs. Defaults to no retries.\n   * @param options.errorHandler An optional function to handle errors that occur during task execution. Defaults to `console.error`.\n   *\n   * @returns A new instance of `TaskGraphBuilder` with the new task added for chaining.\n   *\n   * @throws {Error} If a task with the same ID already exists.\n   * @throws {Error} If a specified dependency task has not been added to the graph yet.\n   *\n   * @returns A new instance of `TaskGraphBuilder` with the new task added for chaining.\n   */\n  public addTask<TTaskId extends string, TTaskDependencyIds extends TAllDependencyIds, TTaskReturn>(\n    options: TaskOptions<TTaskId, TTaskDependencies, TTaskContext, TTaskReturn, TTaskDependencyIds>,\n  ) {\n    const taskId = options.id;\n    if (this._tasks.has(taskId)) throw new Error(`Task with id ${taskId} already exists`);\n    const task = new Task<TTaskDependencies, TTaskContext, TTaskReturn>(options);\n    this._tasks.set(taskId, task);\n\n    for (const depId of options.dependencies ?? []) {\n      if (typeof depId !== \"string\") throw new Error(\"Dependency ID must be a string\");\n      const dependentTask = this._tasks.get(depId);\n      if (!dependentTask) throw new Error(`Dependency ${depId} not found for task ${taskId}`);\n      task.addDependency(depId);\n    }\n\n    return this as unknown as TaskGraphBuilder<\n      TTaskDependencies,\n      TTaskContext &\n        Partial<{\n          [K in TTaskId]: TTaskReturn;\n        }>,\n      TAllDependencyIds | TTaskId\n    >;\n  }\n\n  /**\n   * Builds and returns a TaskGraphRunner instance.\n   * This method finalizes the task graph and prepares it for execution by topologically sorting the tasks.\n   *\n   * @returns A new `TaskGraphRunner` instance ready to execute the task graph.\n   *\n   * @throws {Error} If no tasks have been added to the graph.\n   */\n  public build() {\n    if (!this.size) throw new Error(\"Unable to build TaskGraphRunner. No tasks added to the graph\");\n    this._topologicalSort();\n    return new TaskGraphRunner(this._dependencies, this._contextValueOrFactory, this._topologicalOrder, this._tasks);\n  }\n\n  /**\n   * Returns the number of tasks in the graph.\n   */\n  public get size() {\n    return this._tasks.size;\n  }\n\n  /**\n   * Topologically sorts the tasks in the graph, placing the sorted order in the `_topologicalOrder` array.\n   */\n  private _topologicalSort() {\n    const visited = new Set<string>();\n    const temp = new Set<string>();\n\n    const visit = (taskId: string) => {\n      if (temp.has(taskId)) throw new Error(`Circular dependency detected involving task ${taskId}`);\n      if (!visited.has(taskId)) {\n        temp.add(taskId);\n        const task = this._tasks.get(taskId);\n        if (!task) throw new Error(`Task ${taskId} not found`);\n        for (const depId of task.dependencies) visit(depId);\n        temp.delete(taskId);\n        visited.add(taskId);\n        this._topologicalOrder.push(taskId);\n      }\n    };\n\n    for (const taskId of this._tasks.keys()) if (!visited.has(taskId)) visit(taskId);\n    visited.clear();\n    temp.clear();\n  }\n}\n\n/**\n * Represents a task graph runner that executes tasks in a topologically sorted order.\n * It assumes the passed tasks are already topologically sorted.\n *\n * @template TTaskDependencies - Type of the dependencies each task will receive\n * @template TTaskContext - Type of the context each task will receive\n */\nexport class TaskGraphRunner<\n  TTaskDependencies extends Record<string, unknown>,\n  TTaskContext extends Record<string, unknown> & { initial: unknown },\n> {\n  private readonly context = new Context<TTaskContext[\"initial\"], TTaskContext>();\n\n  constructor(\n    private _dependencies: TTaskDependencies,\n    private _contextValueOrFactory: undefined | TTaskContext | (() => TTaskContext | Promise<TTaskContext>),\n    private readonly _topologicalOrder: string[],\n    private readonly _tasks: Map<string, Task<TTaskDependencies, TTaskContext, unknown>>,\n  ) {}\n\n  /**\n   * Runs the tasks in the graph in topological order.\n   * Tasks are run concurrently when possible.\n   * In the event a task fails, other independent tasks will continue to run.\n   *\n   * @returns A promise that resolves to the completed context object when all tasks have completed.\n   */\n  async run(): Promise<TTaskContext> {\n    if (this._topologicalOrder.length === 0) {\n      throw new Error(\"No tasks to run. Did you forget to call topologicalSort?\");\n    }\n\n    let value: TTaskContext[\"initial\"] | undefined;\n    if (this._contextValueOrFactory) {\n      value =\n        typeof this._contextValueOrFactory === \"function\"\n          ? await (this._contextValueOrFactory as () => TTaskContext[\"initial\"] | Promise<TTaskContext[\"initial\"]>)()\n          : this._contextValueOrFactory;\n    }\n    this.context.reset(value);\n\n    const completed = new Set<string>();\n    const running = new Map<string, Promise<void>>();\n    const readyTasks = new Set<string>(\n      this._topologicalOrder.filter((taskId) => {\n        const task = this._tasks.get(taskId);\n        if (!task) throw new Error(`Task ${taskId} not found`);\n        return task.dependencies.length === 0;\n      }),\n    );\n\n    const runTask = async (taskId: string) => {\n      const task = this._tasks.get(taskId);\n      if (!task) throw new Error(`Task ${taskId} not found`);\n\n      try {\n        const result = await task.run(this._dependencies, this.context.value);\n        await this.context.update({ [taskId]: result });\n        completed.add(taskId);\n      } catch {\n        // completed in the sense that we won't try to run it again\n        completed.add(taskId);\n      } finally {\n        running.delete(taskId);\n\n        // Check if any dependent tasks are now ready to run\n        for (const [id, t] of this._tasks) {\n          if (!completed.has(id) && !running.has(id)) {\n            const canRun = t.dependencies.every((depId) => {\n              const depTask = this._tasks.get(depId);\n              return depTask && completed.has(depId) && depTask.status === \"completed\";\n            });\n            if (canRun) readyTasks.add(id);\n          }\n        }\n      }\n    };\n\n    while (completed.size < this._tasks.size) {\n      // Start all ready tasks\n      for (const taskId of readyTasks) {\n        readyTasks.delete(taskId);\n        const promise = runTask(taskId);\n        running.set(taskId, promise);\n      }\n\n      // Wait for at least one task to complete\n      if (running.size > 0) {\n        await Promise.race(running.values());\n      } else {\n        // no tasks are running and we have not completed all tasks\n        // happens when tasks could not run due to failed dependencies\n        break;\n      }\n    }\n\n    return this.context.value;\n  }\n}\n","/* --------------------------------------------------------------------------\n\n  MIT License\n\n  Copyright (c) 2024 Rami Pellumbi\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n-----------------------------------------------------------------------------*/\n\n/**\n * Used to allow for the sharing of state between tasks.\n */\nexport class Context<TInitial, TContext> {\n  private object!: { initial: TInitial | undefined } & TContext;\n  private updateQueue: Promise<void>;\n\n  constructor(initialValue?: TInitial) {\n    this.reset(initialValue);\n    this.updateQueue = Promise.resolve();\n  }\n\n  /**\n   * Gets the current state of the managed object.\n   */\n  public get value(): { initial: TInitial | undefined } & TContext {\n    return this.object;\n  }\n\n  /**\n   * Resets the context to its initial state or a new initial object.\n   */\n  public reset(initialValue: TInitial | undefined): void {\n    if (initialValue !== undefined && initialValue !== null) {\n      this.object = { initial: initialValue } as {\n        initial: TInitial;\n      } & TContext;\n    } else {\n      this.object = { initial: undefined } as {\n        initial: TInitial | undefined;\n      } & TContext;\n    }\n  }\n\n  /**\n   * Asynchronously updates the context with new values. Ensures that updates are applied in the order they are called.\n   */\n  public update<NewValue extends object>(updateValue: NewValue): Promise<void> {\n    this.updateQueue = this.updateQueue.then(() => {\n      // overrides won't happen with how this is used since\n      // the initial context is under the key \"initial\"\n      // and all task results are under the unique id of that task\n      this.object = { ...this.object, ...updateValue };\n      return Promise.resolve();\n    });\n    return this.updateQueue;\n  }\n}\n","/* --------------------------------------------------------------------------\n\n  MIT License\n\n  Copyright (c) 2024 Rami Pellumbi\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n-----------------------------------------------------------------------------*/\n\nimport { promisify } from \"node:util\";\n\n/**\n * Represents the options for a task.\n *\n * @template TTaskId - string literal type representing the task ID\n * @template TTaskDependencies - Type of task dependencies passed into the task execution function\n * @template TTaskContext - Type of task context passed into the task execution function\n * @template TTaskReturn - Type of task return value\n * @template TPossibleTaskDependencyId - string literal type representing the possible dependencies of this task\n * @template TInput - Type of the input object passed into the task execution function and error handler\n *\n */\nexport type TaskOptions<\n  TTaskId extends string,\n  TTaskDependencies extends Record<string, unknown>,\n  TTaskContext extends Record<string, unknown> & { initial: unknown },\n  TTaskReturn,\n  TPossibleTaskDependencyId extends string = never,\n  TInput = { deps: TTaskDependencies; ctx: TTaskContext },\n> = {\n  /**\n   * The unique ID of the task.\n   */\n  id: TTaskId;\n  /**\n   * The dependencies of the task.\n   */\n  dependencies?: TPossibleTaskDependencyId[];\n  /**\n   * The retry policy for the task.\n   *\n   * @default { maxRetries: 0, retryDelayMs: 0 }\n   */\n  retryPolicy?: RetryPolicy;\n  /**\n   * The function that executes the task.\n   * This function receives the task dependencies and context as input. It can be synchronous or asynchronous.\n   *\n   * @param input - The input object containing the task dependencies and context\n   * @returns The return value of the task\n   * @throws An error if the task execution fails after all retry attempts\n   */\n  execute: (input: TInput) => Promise<TTaskReturn> | TTaskReturn;\n  /**\n   * An optional error handler for the task.\n   * This function receives an error and the input object as input. It can be synchronous or asynchronous.\n   * When an error handler is provided, it will be invoked when the task execution fails after all retry attempts.\n   * The error will still be thrown after the error handler has been executed.\n   *\n   * @param err - The error that occurred during task execution\n   * @param input - The input object containing the task dependencies and context\n   * @returns A promise that resolves when the error has been handled\n   * @default console.error\n   */\n  errorHandler?: (err: Error, input: TInput) => Promise<void> | void;\n};\n\n/**\n * Represents a task that can be executed. A task takes a set of dependencies and a context as input,\n * and returns a (potentially void) value when executed.\n *\n * @template TTaskDependencies - Type of task dependencies\n * @template TTaskContext - Type of task context\n * @template TTaskReturn - Type of task return value\n */\nexport class Task<\n  TTaskDependencies extends Record<string, unknown>,\n  TTaskContext extends Record<string, unknown> & { initial: unknown },\n  TTaskReturn,\n> {\n  private readonly _dependencies: string[] = [];\n\n  private _retryPolicy: RetryPolicy = { maxRetries: 0, retryDelayMs: 0 };\n  private _status: TaskStatus = \"pending\";\n\n  constructor(private readonly options: TaskOptions<string, TTaskDependencies, TTaskContext, TTaskReturn, string>) {\n    if (options.retryPolicy) {\n      this._validateRetryPolicy(options.retryPolicy);\n      this._retryPolicy = options.retryPolicy;\n    }\n  }\n\n  /**\n   * Adds a dependency to the task.\n   *\n   * @param taskId - The ID of the task to add as a dependency\n   */\n  public addDependency(taskId: string): void {\n    if (taskId === this.options.id) throw new Error(\"A task cannot depend on itself\");\n    this._dependencies.push(taskId);\n  }\n\n  /**\n   * Gets the list of task dependencies.\n   *\n   * @returns An array of task IDs representing the dependencies\n   */\n  public get dependencies(): string[] {\n    return this._dependencies;\n  }\n\n  /**\n   * Gets the ID of the task.\n   *\n   * @returns The task ID\n   */\n  public get id(): string {\n    return this.options.id;\n  }\n\n  /**\n   * Executes the task with the given dependencies and context, retrying if necessary\n   * up to the maximum number of retries specified in the retry policy. Each retry\n   * is separated by the retry delay (in ms) specified in the retry policy.\n   *\n   * @param {TTaskDependencies} deps - The task dependencies\n   * @param {TTaskContext} ctx - The task context\n   * @returns {Promise<TTaskReturn>} A promise that resolves with the task result\n   * @throws {Error} If the task execution fails after all retry attempts\n   */\n  public async run(deps: TTaskDependencies, ctx: TTaskContext): Promise<TTaskReturn> {\n    // we retry maxRetries times on top of the initial attempt\n    for (let attempt = 0; attempt < this._retryPolicy.maxRetries + 1; attempt++) {\n      try {\n        this._status = \"running\";\n        const result = await this.options.execute({ deps, ctx });\n        this._status = \"completed\";\n        return result;\n      } catch (err) {\n        if (attempt === this._retryPolicy.maxRetries) {\n          console.error(`Task failed after ${attempt + 1} attempts: ${err}`);\n          const error = err instanceof Error ? err : new Error(`Non error throw: ${String(err)}`);\n          try {\n            if (this.options.errorHandler) await this.options.errorHandler(error, { deps, ctx });\n            else console.error(`Error in task ${this.options.id}: ${err}`);\n          } catch (error) {\n            console.error(`Error in task error handler for ${this.options.id}: ${error}`);\n          }\n          this._status = \"failed\";\n          throw error;\n        }\n        console.error(`Task failed, retrying (attempt ${attempt + 1}/${this._retryPolicy.maxRetries}): ${err}`);\n        await sleep(this._retryPolicy.retryDelayMs);\n      }\n    }\n\n    // This line should never be reached due to the for loop condition,\n    // but TypeScript requires a return statement here\n    throw new Error(\"Unexpected end of run method\");\n  }\n\n  /**\n   * Gets the status of the task.\n   *\n   * @returns The current status of the task\n   */\n  public get status() {\n    return this._status;\n  }\n\n  private _validateRetryPolicy(retryPolicy: RetryPolicy) {\n    const { maxRetries, retryDelayMs } = retryPolicy;\n    if (typeof maxRetries !== \"number\" || maxRetries < 0 || !Number.isInteger(maxRetries)) {\n      throw new Error(\"maxRetries must be a non-negative integer\");\n    }\n    if (typeof retryDelayMs !== \"number\" || retryDelayMs < 0) {\n      throw new Error(\"retryDelayMs must be a non-negative number\");\n    }\n  }\n}\n\nconst sleep = promisify(setTimeout);\n\n/**\n * Defines the retry policy for a task.\n */\ntype RetryPolicy = {\n  /**\n   * The maximum number of retry attempts.\n   */\n  maxRetries: number;\n  /**\n   * The delay in milliseconds between retry attempts.\n   */\n  retryDelayMs: number;\n};\n\n/**\n * Represents the possible states of a task.\n *\n * - pending: Task is pending execution start\n * - running: Task is executing\n * - completed: Task has been executed successfully\n * - failed: Task has failed to execute\n */\ntype TaskStatus = \"pending\" | \"running\" | \"completed\" | \"failed\";\n"],"mappings":"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","names":["error"]}