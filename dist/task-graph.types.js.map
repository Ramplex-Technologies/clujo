{"version":3,"sources":["../src/task-graph.types.ts"],"sourcesContent":["export type RetryPolicy = {\n  maxRetries: number;\n  retryDelayMs: number;\n};\n\nexport interface TaskOptions<TTaskId extends string, TCommonInput, TContextInput, TReturn, TDependencies> {\n  id: TTaskId;\n  dependencies?: TDependencies[];\n  retryPolicy?: RetryPolicy;\n  execute: (input: { deps: TCommonInput; ctx: TContextInput }) => Promise<TReturn> | TReturn;\n  errorHandler?: (err: Error, input: { deps: TCommonInput; ctx: TContextInput }) => Promise<void> | void;\n}\n\nexport interface ITask<TCommonInput, TContextInput, TReturn> {\n  id: string;\n  dependencies: string[];\n  addDependency(taskId: string): void;\n  run(commonInput: TCommonInput, context: TContextInput): Promise<TReturn>;\n}\n\nexport type TaskMap<TDependencies, TContext> = {\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  [key: string]: ITask<TDependencies, TContext, any>;\n};\n\nexport interface ITaskGraphBuilder<TDependencies, TContext> {\n  // biome-ignore lint/complexity/noBannedTypes: <explanation>\n  finalizeSetup(): ITaskGraphBuilderHelper<TDependencies, TContext, {}>;\n  setDependencies<TNewDependencies extends object>(\n    value?: TNewDependencies,\n  ): ITaskGraphBuilder<TNewDependencies, TContext>;\n  setInitialContext<TNewContext extends object>(\n    valueOrFactory?: TNewContext | (() => TNewContext | Promise<TNewContext>),\n  ): ITaskGraphBuilder<TDependencies, TNewContext>;\n}\n\nexport interface ITaskGraphBuilderHelper<TDependencies, TContext, TTaskMap extends TaskMap<TDependencies, TContext>> {\n  addTask<TTaskId extends string, TReturn>(\n    options: TaskOptions<TTaskId, TDependencies, TContext, TReturn, keyof TTaskMap>,\n  ): ITaskGraphBuilderHelper<\n    TDependencies,\n    TContext &\n      Partial<{\n        [K in TTaskId]: TReturn;\n      }>,\n    TTaskMap & {\n      [K in TTaskId]: ITask<\n        TDependencies,\n        TContext &\n          Partial<{\n            [K in TTaskId]: TReturn;\n          }>,\n        TReturn\n      >;\n    }\n  >;\n  build(): ITaskGraph<TContext>;\n  size: number;\n}\n\nexport interface ITaskGraph<TContext> {\n  run(): Promise<Required<TContext>>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}