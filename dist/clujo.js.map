{"version":3,"sources":["../src/clujo.ts","../src/_cron.ts"],"sourcesContent":["/* --------------------------------------------------------------------------\n\n  croner - MIT License - Hexagon <hexagon@56k.guru>\n  ioredis - MIT License - Zihua Li\n  redis-semaphore - MIT License - Alexander Mochalin\n\n  ---------------------------------------------------------------------------\n\n  MIT License\n\n  Copyright (c) 2024 Rami Pellumbi\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n-----------------------------------------------------------------------------*/\n\nimport type { CronOptions } from \"croner\";\nimport type { Redis } from \"ioredis\";\nimport { type LockOptions, Mutex } from \"redis-semaphore\";\nimport { Cron } from \"./_cron\";\nimport type { TaskGraphRunner } from \"./task-graph\";\n\n/**\n * Represents a Clujo instance, which is a cron job that executes a task graph.\n *\n * @template TTaskDependencies - Type of the dependencies each task will receive\n * @template TTaskContext - Type of the context each task will receive\n */\nexport class Clujo<\n  TTaskDependencies extends Record<string, unknown>,\n  TTaskContext extends Record<string, unknown> & {\n    initial: unknown;\n  },\n> {\n  public readonly id: string;\n\n  private readonly _cron: Cron;\n  private readonly _taskGraphRunner: TaskGraphRunner<TTaskDependencies, TTaskContext>;\n\n  private _hasStarted = false;\n\n  /**\n   *\n   * @param input The input to the Clujo constructor.\n   * @param input.id The unique identifier for the Clujo instance.\n   * @param input.taskGraphRunner The task graph runner to use for executing the task graph.\n   * @param input.cron The cron schedule for the Clujo instance.\n   * @param input.cron.pattern The cron pattern to use for scheduling the task graph. If a Date object is provided, the task graph will execute once at\n   *   the specified time.\n   * @param input.cron.options Optional options to use when creating the cron job.\n   *\n   * @throw An error if the Clujo ID, task graph runner, or cron pattern is not provided.\n   *\n   * @example\n   * const clujo = new Clujo({\n   *   id: 'my-clujo-instance',\n   *   taskGraphRunner: new TaskGraphRunner(...),\n   *   cron: {\n   *     pattern: '0 0 * * *', // Run daily at midnight\n   *     options: { timezone: 'America/New_York' }\n   *   }\n   * });\n   */\n  constructor({\n    id,\n    taskGraphRunner,\n    cron,\n  }: {\n    id: string;\n    taskGraphRunner: TaskGraphRunner<TTaskDependencies, TTaskContext>;\n    cron: { pattern: string | Date; options?: CronOptions };\n  }) {\n    if (!id) throw new Error(\"Clujo ID is required.\");\n    if (!taskGraphRunner) throw new Error(\"taskGraphRunner is required\");\n    if (!cron.pattern) throw new Error(\"cron.pattern is required\");\n    this.id = id;\n    this._taskGraphRunner = taskGraphRunner;\n    this._cron = new Cron(cron.pattern, cron.options);\n  }\n\n  /**\n   * Starts the cron job, which will execute the task graph according to the cron schedule.\n   * If a redis client instance is provided, a lock will be acquired before executing the task graph, preventing overlapping executions.\n   *\n   * @param redis The Redis client to use for locking.\n   * @param onTaskCompletion An optional function to execute after the task graph has completed.\n   * @param runImmediately An optional boolean which, if set to true, executes the task graph immediately upon starting.\n   *    The overlap behavior here depends on if a lock is used (never any overlap), or if `preventOverlap` was disabled (\n   *    in which case there is overlap between multiple instances of the same Clujo).\n   * @returns The Clujo instance.\n   * @throws An error if the Clujo has already started.\n   */\n  public start(\n    {\n      redis,\n      onTaskCompletion,\n      runImmediately,\n    }: {\n      redis?: { client: Redis; lockOptions?: LockOptions };\n      onTaskCompletion?: (ctx: TTaskContext) => void | Promise<void>;\n      runImmediately?: boolean;\n    } = {\n      redis: undefined,\n      onTaskCompletion: undefined,\n      runImmediately: false,\n    },\n  ) {\n    if (this._hasStarted) throw new Error(\"Cannot start a Clujo that has already started.\");\n    if (redis) if (!redis.client) throw new Error(\"Redis client is required.\");\n    if (onTaskCompletion && typeof onTaskCompletion !== \"function\") {\n      throw new Error(\"onTaskCompletion must be a function (sync or async).\");\n    }\n    if (runImmediately && typeof runImmediately !== \"boolean\") {\n      throw new Error(\"runImmediately must be a boolean.\");\n    }\n\n    const executeTasksAndCompletionHandler = async () => {\n      const finalContext = await this._taskGraphRunner.run();\n      if (onTaskCompletion) await onTaskCompletion(finalContext);\n    };\n\n    const handler = async () => {\n      try {\n        if (!redis) await executeTasksAndCompletionHandler();\n        else {\n          await using lock = await this._tryAcquire(redis.client, redis.lockOptions);\n          if (lock) await executeTasksAndCompletionHandler();\n        }\n      } catch (error) {\n        console.error(`Clujo ${this.id} failed: ${error}`);\n      }\n    };\n    this._cron.start(handler);\n    this._hasStarted = true;\n    // we use the cron trigger here so that prevent overlapping is active by default\n    // i.e., if no lock is used, and the trigger is executing, and the schedule time is reached, the scheduled execution will be skipped\n    if (runImmediately) this._cron.trigger();\n    return this;\n  }\n\n  /**\n   * Stops the cron job and prevents any further executions of the task graph.\n   * If the task graph is currently executing, it will be allowed to finish for up to the specified timeout.\n   *\n   * @param timeout The maximum time to wait for the task graph to finish executing before stopping the cron.\n   * @returns A promise that resolves when the cron has stopped.\n   * @throws An error if the Clujo has not started.\n   */\n  public async stop(timeout = 5000): Promise<void> {\n    if (!this._hasStarted) throw new Error(\"Cannot stop a Clujo that has not started.\");\n    await this._cron.stop(timeout);\n  }\n\n  /**\n   * Trigger an execution of the task graph immediately, independent of the cron schedule.\n   * In the event the cron is running, the task graph will still execute.\n   *\n   * @returns The final context of the task graph.\n   */\n  public async trigger(): Promise<TTaskContext> {\n    // we do not trigger via the cron here so that we can make use of the result of the task graph\n    return await this._taskGraphRunner.run();\n  }\n\n  /**\n   * Tries to acquire a lock from redis-semaphore. If the lock is acquired, the lock will be released when the lock is disposed.\n   *\n   * @param redis The Redis client to use.\n   * @param lockOptions The options to use when acquiring the lock.\n   *\n   * @returns An AsyncDisposable lock if it was acquired, otherwise null.\n   */\n  private async _tryAcquire(redis: Redis, lockOptions: LockOptions | undefined): Promise<ILock | null> {\n    const mutex = new Mutex(redis, this.id, lockOptions);\n    const lock = await mutex.tryAcquire();\n    if (!lock) return null;\n    return {\n      mutex,\n      [Symbol.asyncDispose]: async () => {\n        try {\n          await mutex.release();\n        } catch (error) {\n          console.error(`Error releasing lock for Clujo ${this.id}: ${error}`);\n        }\n      },\n    };\n  }\n}\n\ninterface ILock extends AsyncDisposable {\n  mutex: Mutex;\n}\n","/* --------------------------------------------------------------------------\n\n  croner - MIT License - Hexagon <hexagon@56k.guru>\n\n  ---------------------------------------------------------------------------\n\n  MIT License\n\n  Copyright (c) 2024 Rami Pellumbi\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n-----------------------------------------------------------------------------*/\n\nimport { type CronOptions, Cron as Croner } from \"croner\";\n\nexport class Cron {\n  private job: Croner | null = null;\n\n  constructor(\n    private readonly cronExpression: string | Date,\n    private readonly cronOptions?: CronOptions,\n  ) {}\n\n  /**\n   * Starts the cron job with the specified handler.\n   *\n   * @param handler A function to be executed when the cron job triggers.\n   * @throws {Error} If attempting to start a job that has already been started.\n   */\n  public start(handler: () => Promise<void> | void): void {\n    if (this.job) throw new Error(\"Attempting to start an already started job\");\n    this.job = new Croner(this.cronExpression, this.cronOptions, handler);\n  }\n\n  /**\n   * Stops the cron job. If the job is currently running, it will wait for the job to finish before stopping it.\n   * This can be safely invoked even if the job hasn't been started.\n   *\n   * @param timeout The maximum time (in ms) to wait for the job to finish before stopping it forcefully.\n   * @returns A promise that resolves when the job has been stopped\n   */\n  public stop(timeout: number): Promise<void> {\n    return new Promise<void>((resolve) => {\n      const startTime = Date.now();\n      const checkAndStop = () => {\n        if (!this.job) {\n          resolve(); // resolve if job has cleared\n          return;\n        }\n\n        if (this.job.isBusy()) {\n          if (Date.now() - startTime > timeout) {\n            this.job.stop();\n            this.job = null;\n            resolve();\n            return;\n          }\n          setTimeout(checkAndStop, 100);\n        } else {\n          this.job.stop();\n          this.job = null;\n          resolve();\n          return;\n        }\n      };\n\n      checkAndStop();\n    });\n  }\n\n  /**\n   * Triggers the cron job to run immediately. A triggered execution will prevent the job from running at its scheduled time\n   * unless `preventOverlap` is set to `false` in the cron options.\n   *\n   * @throws {Error} If attempting to trigger a job that is not running.\n   */\n  public async trigger(): Promise<void> {\n    if (!this.job) throw new Error(\"Attempting to trigger a job that is not running\");\n    await this.job.trigger();\n  }\n}\n"],"mappings":"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","names":["Croner"]}